name: Code quality
on: pull_request

jobs:
  pylint:
    runs-on: ubuntu-latest
    name: Pylint
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pylint==2.12.2
          python -m pip install -r tests/python/requirements.txt

      - name: Build
        run: |
          python -m pip install .

      - name: Lint
        uses: TheFoundryVisionmongers/fn-pylint-action@v1.1
        with:
          pylint-disable: fixme  # We track 'todo's through other means
          pylint-rcfile: "./pyproject.toml"
          pylint-paths: "python/openassetio tests/python"
          # Presently it's not possible to disable the `duplicate-code`
          # check for specific files, so it thinks that the symlink is
          # duplicated implementation. See:
          #     https://github.com/PyCQA/pylint/issues/214
          pylint-ignore-paths: "tests/python/openassetio/pluginSystem/resources/symlinkPath"

  cpp-linters:
    name: C++ linters
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v2
        with:
          path: ~/conan
          key: ubuntu-20.04-conan

      - name: Install dependencies
        # Configure the system and install library dependencies via
        # conan packages.
        run: |
          source resources/build/bootstrap-ubuntu-20.04.sh
          clang-tidy --version
          clang-format --version
          cpplint --version
        env:
          WORKSPACE: .

      - name: Configure CMake build
        run: >
          cmake -S . -B build -G Ninja
          --install-prefix $GITHUB_WORKSPACE/dist
          --toolchain $HOME/conan/conan_paths.cmake
          --preset lint

      - name: Build and lint
        run: cmake --build build

  sanitizers:
    name: Sanitizers
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v2
        with:
          path: ~/conan
          key: ubuntu-20.04-conan

      - name: Install dependencies
        # Configure the system and install library dependencies via
        # conan packages.
        run: |
          source resources/build/bootstrap-ubuntu-20.04.sh
        env:
          WORKSPACE: .

      - name: Configure CMake build
        run: >
          cmake -S . -B build -G Ninja
          --install-prefix $GITHUB_WORKSPACE/dist
          --toolchain $HOME/conan/conan_paths.cmake
          --preset sanitize

      - name: Build and test
        run: ctest -VV --test-dir build
