name: Build Wheels

on:
  push:
    branches:
      - main
      - feature/*
  workflow_dispatch:
  pull_request:
    branches-ignore:
      - docs
    paths-ignore:
      - 'docs/**'

concurrency:
  group: wheel-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.config.os }} for Python ${{matrix.python_version}}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-20.04
            shell: bash
          - os: macos-12
            shell: bash
          - os: windows-2019
            preamble: call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
            shell: cmd
        # We matrix the python build here ourselves, rather than
        # letting cibuildwheel do its regular python matrix, as we
        # want to allow a full release pipeline to run "vertically" on
        # CI, on individual agents, rather than building every python
        # version sequentially on each platform. This is done less for
        # performance reasons (although it does help) and more so a
        # single failing python version won't interrupt every other
        # deploy on that platform. It also helps by ensuring that the
        # `bootstrap_platform` workflow uses the appropriate Python
        # version.
        python_version: ["3.9", "3.10", "3.11"]
    defaults:
      run:
        shell: ${{ matrix.config.shell }}

    steps:
      - uses: actions/checkout@v4

      - name: Bootstrap
        uses: ./.github/bootstrap_platform

      - name: Python version to CIBW version format
        # These are the platform build strings provided to
        # cibuildwheel, with wildcarding. E.g. "cp311*64". See
        # https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
        run: >
          echo CIBW_BUILD="cp"$(printf ${{ matrix.python_version }} | sed 's/\.//')"*64" >> $GITHUB_ENV
        shell: bash

      - name: Build wheels
        run: |
          ${{ matrix.config.preamble }}
          pip install cibuildwheel==2.11.1
          cibuildwheel --output-dir wheelhouse src/openassetio-python
        env:
          # Windows + Mac runs use this environment variable, as they
          # execute directly on the runner. Linux runs are somewhat
          # different, and are containerised fully, therefore they get
          # their toolchain path from pyproject.toml
          CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/.conan/conan_paths.cmake
          CIBW_SKIP: '*musllinux* *arm64*'
          # Python 3.9 implies VFX Reference Platform CY22, which
          # specifies glibc 2.17 and the deprecated libstdc++ ABI, and
          # is typically associated with CentOS 7. The manylinux2014
          # container is CentOS 7 based so is a great fit in this case.
          # However, for CY23+, i.e. Python 3.10+, glibc is 2.28
          # and the non-deprecated libstdc++ ABI should be used. In this
          # case, manylinux_2_28 must be used to support the
          # non-deprecated libstdc++ ABI, i.e. so that compiler macro
          # `-D_GLIBCXX_USE_CXX11_ABI=1` will work. See
          # https://github.com/pypa/manylinux and
          # https://vfxplatform.com
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.config.python_version == '3.9' && 'manylinux2014' || 'manylinux_2_28' }}
          PIP_VERBOSE: 1
          # Required as we make use of c++17 features
          MACOSX_DEPLOYMENT_TARGET: 10.15
          # Ensure .pyi stub tests won't be skipped
          OPENASSETIO_TEST_ENABLE_PYTHON_STUBGEN: 1

      - uses: actions/upload-artifact@v3
        with:
          name: "openassetio-wheels"
          path: ./wheelhouse/*.whl
