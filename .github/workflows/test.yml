# A simple workflow to run tests using pytest against supported Python versions

name: Tests
on:
  pull_request:
    branches-ignore:
      - docs
    paths-ignore:
      - 'docs/**'

  test:
    name: Test ${{ matrix.os.id }}
    runs-on: ${{ matrix.os.id }}
    strategy:
      fail-fast: false
      matrix:
        # We can't properly align to the VFX Reference Platform as this
        # requires glibc 2.17, which is older than any of the available
        # environments.
        os:
        - id: windows-2019
          vcvars: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
        - id: ubuntu-20.04
        # Temporarily disabling macOS CI due to pybind issue, see:
        #   https://github.com/conan-io/conan-center-index/pull/11075
        # - os: macos-10.15

    steps:
    - uses: actions/checkout@v2

    - name: Bootstrap
      uses: ./.github/bootstrap_platform

    - name: Configure CMake build (Unix)
      if: runner.os != 'Windows'
      run: >
        cmake -S . -B build -G Ninja
        --install-prefix $GITHUB_WORKSPACE/dist
        --toolchain $HOME/conan/conan_paths.cmake
        --preset test

    - name: Configure CMake build (Windows)
      if: runner.os == 'Windows'
      run: >
        call "${{ matrix.os.vcvars }}"

        cmake -G Ninja -S . -B build --install-prefix %GITHUB_WORKSPACE%\dist
        --toolchain %USERPROFILE%\conan\conan_paths.cmake -DCMAKE_VERBOSE_MAKEFILE=ON
        --preset test

      shell: cmd

    - name: Build, install and test (Unix)
      if: runner.os != 'Windows'
      run: |
        ctest -VV --test-dir build --parallel 2

    - name: Build, install and test (Windows)
      if: runner.os == 'Windows'
      run: |
        call "${{ matrix.os.vcvars }}"
        ctest -VV --test-dir build --parallel 2
      shell: cmd

  docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Test
      run: |
        echo "::add-matcher::./.github/workflows/problem-matchers/doxygen.json"
        # Problem matches don't actually error a step, so we have to
        # manually check for warnings/errors at the end. Capture the
        # output so we can parse it later.
        set -o pipefail
        make -C doc 2>&1 | tee doxygen-log.txt
        echo "::remove-matcher owner=doxygen::"
        # Fail the job if we have Doxygen warning/error lines in the
        # output. NB: This is the same regex as doxygen.json, adapted
        # to work with GNU grep.
        ! grep -qE "^.*?/src/[^:]+:[0-9]+: ?[a-zA-Z]+: ?.*$" doxygen-log.txt

    - name: Expose archive docs artifact
      uses: actions/upload-artifact@v2
      with:
        name: doxygen-documentation
        path: doc/html

  business-language:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Check business language
      run: |
        # Check that the acronym version of OpenAssetIO isn't in use
        # in the code base, see:
        #   https://github.com/OpenAssetIO/OpenAssetIO/issues/153
        # NB: The quotes deliberately avoid the string in question
        # appearing in this file, and failing the test.
        ! grep -ir "o""aio" .

