/*!
 * @page notes_for_managers Notes for Asset System Integrators
 *
 * @section manager_architecture_summary Architecture Summary
 *
 * - In OpenAssetIO, a @ref manager is some centralized system that serves
 *   as a source of truth regarding the status and/or location of digital
 *   media and other organizational aspects of a project. The goal of the
 *   API is to allow these systems to be more easily integrated, and
 *   critically, more comprehensively involved in the lifetime of content
 *   as it moves between various tools and applications.
 *
 * - The implementation of any given manager may consist of
 *   several discrete services, but within any OpenAssetIO session, it
 *   is represented though a singular @ref
 *   PythonPluginSystemManagerPlugin.
 *
 * - The API is initialized and coordinated by a @ref host. The host may
 *   instantiate one or more managers.
 *
 * - All interaction between the @ref host and a @ref manager occurs
 *   through the manager's implementation of the @ref ManagerInterface.
 *   This is a publicly stateless interface, where all associated
 *   information about the session, and caller are provided to each method
 *   by the API middleware.
 *
 * - A manager's implementation of the @ref ManagerInterface supplied
 *   through its @ref PythonPluginSystemManagerPlugin is wrapped in the
 *   @ref openassetio.hostApi.Manager.Manager "Manager" class before
 *   being made available to the @ref host. This is to allow for host
 *   session state management and other auditing/logging functionality.
 *   It also provides a degree of isolation against future API changes.
 *
 * - The @ref ManagerInterface is designed to be stateless. The
 *   response to any method should only depend on the underlying asset
 *   data and any other objects passed into each call. The same logical
 *   operation may be spread out over time and space. It is critical that
 *   any particular implementation does not rely on local in-memory state.
 *
 * - The main currency in the interaction with a host is the @ref
 *   entity_reference. These are URIs that uniquely identify an @ref
 *   entity within the management system. The form of an entity reference
 *   is entirely determined by the manager. They are considered to be
 *   opaque handles by the host, even if they look like well-formed
 *   strings.
 *
 * - The manager is expected to store and recall the properties of
 *   supported traits @fqref{managerApi.ManagerInterface.register_}
 *   "registered" to any given @ref entity_reference, and return this
 *   data from the relevant query methods when supplied the reference
 *   returned from the registration.
 *
 * - A @ref host may query other well-known or host-specific @needsref
 *   traits to provide additional customization of behavior or the
 *   handling of data referenced by an @ref entity_reference. For
 *   example, determining the correct frame range and colorspace of an
 *   image sequence.
 *
 * - The @ref Context supplied to a method can be used to understand the
 *   intentions and/or requirements of the caller, as well as to
 *   determine which part of an application is involved in the call.
 *   This can be used to help determine the correct values for @ref
 *   trait properties during @ref resolve.
 *
 * - Many API calls are passed a @ref trait_set. They form a strong type
 *   mechanism, and must be respected as a filter predicate for
 *   browsing/query operations, and as a type specifier for creation
 *   operations. See @ref entities_traits_and_specifications for more
 *   details on this mechanism.
 *
 * - The @ref ManagerInterface implementation will be passed a
 *   @ref openassetio.managerApi.HostSession "HostSession" to the
 *   majority of API calls. This should be used for *all* logging, and
 *   any generic host queries via the supplied
 *   @ref openassetio.managerApi.Host "Host" object. Managers may wish
 *   to use details of the @ref host obtained from this object to adapt
 *   their behavior if desired.
 *
 * - If a manager wants to support some kind of temporally stable
 *   resolution of @ref meta_version "Meta-versions" or similar,
 *   implement @fqref{managerApi.ManagerInterface.createState}
 *   "createState", and return some token that can be used as an anchor.
 *   A new token will be requested each time a @ref Context is made, and
 *   will then be available via @fqref{Context.managerState}
 *   "Context.managerState" in any call that receives a context. Hosts
 *   will take care of managing the lifetime of any given Context in
 *   terms that are meaningful for the user. Eg. the state token will be
 *   shared across distributed multi-host renders.
 *
 * - A manager can provide additional UI elements that interact
 *   with the host, by returning them from @needsref ManagerUIDelegate.getWidgets.
 *   The host will create suitable panels, etc. for them, based on the
 *   flags set in @needsref BaseWidget.getAttributes.
 *
 * @note The UI classes have not yet been migrated from the
 * `FnAssetAPI` code base.
 *
 * @section manager_todo Implementation Check List
 *
 * @note You can use the @ref testing_manager_plugins
 * "manager test harness" to check your implementation, and as a basis
 * for additional tests/CI of your own.
 *
 * @subsection manager_todo_basic_resolution Required for Resolution Only
 *
 * - Implement the @ref openassetio.managerApi.ManagerInterface
 *   "ManagerInterface" class methods
 *   @fqref{managerApi.ManagerInterface.identifier} "identifier" an
 *   @fqref{managerApi.ManagerInterface.displayName} "displayName".
 *
 * - Implement @fqref{managerApi.ManagerInterface.managementPolicy}
 *   "managementPolicy" to control which Host-side data types you wish
 *   to be involved in managing, and specify which property-holding
 *   traits you are capable of resolving. To request not to be involved
 *   in publishing, return an empty @fqref{TraitsData} "TraitsData"
 *   for any queries with a context with `kWrite` access.
 *
 * - Implement the methods grouped under the "Entity Reference Inspection"
 *   and "Entity Reference Resolution" sections of the
 *   @ref openassetio.managerApi.ManagerInterface.ManagerInterface
 *   "ManagerInterface" to support lookup of assets.
 *
 * - Implement @fqref{managerApi.ManagerInterface.resolve} "resolve" and
 *   populate the requested trait property values.
 *
 * - Implement a @ref PythonPluginSystemManagerPlugin and install this
 *   on @ref plugin_path_var.
 *
 * @subsection manager_todo_publishing Required for Publishing
 *
 * - Update the implementation of
 *   @fqref{managerApi.ManagerInterface.managementPolicy}
 *   "managementPolicy" to return suitable traits for contexts with a
 *   `kWrite` access.
 *
 * - Implement the methods grouped under the "Publishing" section, and
 *   the remaining methods in the "Entity Information" section of
 *   @ref openassetio.managerApi.ManagerInterface.ManagerInterface
 *   "ManagerInterface", to support the registration of new assets.
 *
 * - Map supported OpenAssetIO @ref trait "traits" to internal asset
 *   types where possible.
 *
 * - Persist the full @ref trait_set of the specification supplied to
 *   @fqref{managerApi.ManagerInterface.register_} "register". This
 *   allows new asset types to be registered and filtered, even if they
 *   don't have a unique type within the manager's native data model.
 *
 * - Persist the trait data supplied to @fqref{managerApi.ManagerInterface.register_}
 *   "register". It should be considered opaque, unless the trait is
 *   well understood. In all other cases it should be returned verbatim
 *   by @fqref{managerApi.ManagerInterface.resolve} "resolve" when passed
 *   the reference returned from the registration (conditional on any
 *   subsequent registrations to the reference and the policy regarding
 *   entity versioning).
 *
 * @note An example of a situation where the manager is allowed to
 * mutate trait property values is when it is semantically understood. A
 * good example of this is the `location` property of the
 * `locatableContent` trait, that is known to be a file path. In these
 * cases, it may be rewritten at will providing it still points to
 * synonymous data. This allows data to be relocated after it has been
 * registered, as appropriate.
 *
 * @subsection manager_todo_related_entities Supporting Relationships
 *
 * Relationship support is not a pre-requisite, but allows for advanced
 * functionality in many hosts.
 *
 * Relationships aren't required for publishing itself, as the parent
 * for an new entity is always inferred from the entity addressed by the
 * reference used in the @fqref{managerApi.ManagerInterface.preflight}
 * "preflight" or @fqref{managerApi.ManagerInterface.register_}
 * "register" call.
 *
 * For example, publishing an ImageSpecification to the entity reference
 * for a shot means that the image should be published under that shot
 * as the manager sees fit.
 *
 * This may sound counterintuitive, but the references used for
 * publishing will generally originate either from the user, or the
 * manager itself - in response to browsing for a writable target entity
 * for the appropriate @ref trait_set. Consequently, they should be
 * conceptually valid for the operation.
 *
 * Hosts will include in their documentation notes on specific
 * scenarios in which they register entities with one set of traits to
 * references known to be of another, such as the editorial example
 * above.
 *
 * This approach is critical to ensure that OpenAssetIO has no inherent
 * concept of any specific entity hierarchy, which ensures it never
 * places any constraints on the implementation of any given asset
 * management system.
 *
 * In order to support entity relationships:
 *
 * - Implement the API methods grouped under
 *   @ref openassetio.managerApi.ManagerInterface.ManagerInterface
 *   "Related Entities" to return any appropriate @ref entity_reference
 *   "entity references" for the supplied relationship(s).
 *   Hosts may use these relationships to simplify common pipeline
 *   integration tasks. For example, loading multiple AOVs for a render,
 *   or determining data dependencies when transferring assets.
 * - Update your implementation of @fqref{managerApi.ManagerInterface.managementPolicy}
 *   "managementPolicy" to cover the relationship trait sets you support.
 *
 * @subsection manager_todo_ui Embedding Custom UI Within the Host
 *
 * @note The UI layer of OpenAssetIO is yet to be ported to this code base,
 * this documentation section is currently in-progress.
 *
 * - Filter any browsers based on the supplied @ref trait_set.
 *
 * @section manager_reading Recommended Reading
 *
 * @see @ref entities_traits_and_specifications
 * @see @ref openassetio.managerApi.ManagerInterface "ManagerInterface"
 * @see @ref openassetio.pluginSystem.PythonPluginSystemManagerPlugin
 * "PythonPluginSystemManagerPlugin"
 * @see @fqref{Context} "Context"
 * @see @ref openassetio.managerApi.Host "Host"
 * @see @needsref ManagerUIDelegate
 * @see @needsref ui.widgets
 */
