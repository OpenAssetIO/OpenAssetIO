/*! @mainpage An Introduction
 *
 * OpenAssetIO defines a standardized set of interactions between a
 * @ref host of the API (eg: a Digital Content Creation tool or
 * pipeline script) and an @ref asset_management_system.
 *
 * It aims to reduce the integration effort and maintenance overhead of
 * modern CGI pipelines, and pioneer new, standardized asset-centric
 * workflows in post-production tooling.
 *
 * @warning The API has a long history. The OAIO release version is
 * currently in a beta stage and is subject to some refinements over the
 * coming months. See the <a href="https://github.com/TheFoundryVisionmongers/OpenAssetIO/projects/1"
 * target="_blank">project tracker</a> for more details.
 *
 * @section intro_approach The Approach
 *
 * Once we have a common standard, any @ref asset_management_system or
 * @ref host implementing it can be considered to be compatible. This
 * means that neither party needs to pay any particular attention to who
 * it is talking to, unless they specifically desire to do so.
 *
 * Our hope is that a common baseline level of support for the key
 * operations performed within multi-site production pipelines will
 * greatly simplify integration and allow innovative new workflows to be
 * developed. Bridging tool vendors, asset management system authors and
 * facility pipelines.
 *
 * @subsection intro_ams What is an Asset Management System
 *
 * We define an @ref asset_management_system as a system that tracks,
 * and potentially manages, the state and location of digital media.
 * Within the Media and Entertainment sector, these are often known as
 * assets. Within OAIO, we call anything managed by the system an
 * @ref entity.
 *
 * Within post-production, entities are often things like project,
 * sequences, shots, clips, image sequences and 3d models that are used
 * to produce final content. In the API, entities are referred to using
 * an @ref entity_reference.
 *
 * @note We use the term "entity" in the API, rather than "asset" to
 * avoid confusion. Asset is a very loaded term. Most systems we have
 * encountered seem to use the term "asset" to refer to a sub-set of the
 * data they manage. For example, a shot may not be considered to be
 * an asset, but is an addressable entity as far as the API is
 * concerned.
 *
 * @subsection intro_host What is a host?
 *
 * A @ref host is a tool, script or application that either consumes or
 * produces data, that needs to be managed by an asset management
 * system. We call it the "host" as it is responsible for hosting the
 * API and making appropriate calls to one or more asset management
 * systems as part of its operations.
 *
 *
 * @section architecture_overview Architecture
 *
 * @note This API does *not* define, specify or implement either the
 * asset management system or the host, rather a set of generalized
 * queries and actions and concepts that have been found to be common
 * across the majority of known workflows and back-end implementations.
 *
 * Depending on whether you are reading this as a @ref host author, or
 * as an @ref asset_management_system integrator, it is worth
 * understanding the high-level architecture of the system. After this,
 * the documentation (and code base) is separated depending on your
 * focus. The following diagram attempts to show a simplified version of
 * the architecture:
 *
 * @startuml
 * package openassetio.managerAPI {
 *     class Host #white ##black {
 *         +identifier()
 *         ..
 *         +getKnownEntityReferences()
 *         etc.
 *     }
 *     interface ManagerInterface #white;line.dotted ##black
 * }
 *
 * package openassetio.hostAPI {
 *     interface HostInterface #white;line.dotted ##black
 *     class Session #white ##black {
 *         +registeredManagers()
 *         ..
 *         +useManager()
 *         +currentManager()
 *     }
 *     class Manager #white ##black {
 *         +identifier()
 *         ..
 *         +resolveReference()
 *         +register()
 *         etc.
 *     }
 * }
 *
 * package "API Host" <<Node>> #line:grey {
 *     class HostInterfaceImplementation #ffe699 ##black
 * }
 *
 * package "Asset Management System" <<Cloud>> #line:grey {
 *     class ManagerInterfaceImplementation #ffe699 ##black
 * }
 *
 * Session *-- Manager
 *
 * ManagerInterfaceImplementation --* Manager
 * ManagerInterfaceImplementation -up[thickness=4]-> Host : queries
 * ManagerInterfaceImplementation ..|> ManagerInterface
 *
 * Host o-l- HostInterfaceImplementation
 *
 * HostInterfaceImplementation ..|> HostInterface
 * "API Host" -[thickness=4]-> Session : controls
 * "API Host" -[thickness=4]-> Manager : queries
 * @enduml
 *
 * The API is organized into two main namespaces - the
 * @ref openassetio.hostAPI "hostAPI" and @ref openassetio.managerAPI
 * "managerAPI". Within each of these, you will find the components you
 * need depending on whether you are adopting the API in a @ref host or
 * providing support for a @ref manager through a plugin.
 *
 * The first step is always to write an implementation of one of the two
 * abstract interfaces defined by the API, illustrated in orange above -
 * either the @ref openassetio.hostAPI.HostInterface.HostInterface
 * "HostInterface" or @ref openassetio.managerAPI.ManagerInterface.ManagerInterface
 * "ManagerInterface".
 *
 * - The asset management system implements the
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface
 *   "ManagerInterface". This is a stateless, re-entrant interface that is
 *   the sole entry point for all interactions with the host.
 *
 * - The @ref openassetio.hostAPI.HostInterface.HostInterface
 *   "HostInterface" represents the caller of the API. It allows the
 *   asset management system to customize the @ref publishing process
 *   if desired and/or query additional information about the host and its
 *   documents.
 *
 * @see @ref notes_for_hosts
 * @see @ref notes_for_managers
 *
 * The @ref openassetio.managerAPI.Host.Host "Host" and
 * @ref openassetio.hostAPI.Manager.Manager "Manager" classes are
 * implemented within this API to provide state management and audit
 * functionality.
 *
 * @section host_implementation_concept The basic design for a Host
 *
 * A design goal of this API was for it to be (relatively) easy to
 * retro-fit into an existing application or tool. In a minimal
 * implementation, the host follows a few simple rules:
 *
 * - Wherever a file path was stored, store an @ref entity_reference.
 *
 * - Before the stored string is used, resolve it through OAIO and
 *   use the returned value instead.
 *
 * - Involve the manager in creation of data through the
 *   @ref example_publishing_a_file "publishing" workflow.
 *
 * For this reason, OAIO has the concept of mapping an @ref entity to
 * a @ref primary_string - which can be thought of as "the string a
 * host would have used before". It is this string that is returned when
 * an @ref entity_reference is resolved. In many cases in the initial
 * adoption of OAIO, the primary string for an entity will be a file
 * URL.
 *
 * @note The API is by no means limited to just file paths, they form a
 * sensible first step. Any string used in an application, can be
 * asset managed in the same way.
 *
 * OAIO also allows arbitrary key/value pairs to be associated with an
 * entity. This means other more complex data structures can be
 * managed by the asset management system. The only prerequisite
 * being that they can be sensibly encoded in a string and/or simple
 * typed key/value pairs.
 *
 * A renderer for example, could query the correct file format,
 * colorspace and compression options from the manager for the images it
 * is about to create.
 *
 * @section manager_implementation_concept The Asset Manager's Commitment
 *
 * OpenAssetIO was developed to make it possible for an
 * @ref asset_management_system to support any @ref host application
 * without specific knowledge, and vice versa. This is achieved though
 * the use of common specifications and descriptions and three simple
 * rules for the manager:
 *
 * - Store and recall a @ref primary_string
 * - Store and recall @ref metadata
 * - Allow filtering by @ref Specification
 *
 * If these rules are followed, then arbitrary assets from arbitrary
 * hosts can be round-tripped thorough an asset manager without
 * specific support. However, there is scope to build more advanced and
 * useful functionality by mapping OAIO @ref specification
 * "specifications" to the manager's native asset types, and well-known
 * @ref metadata to its asset fields.
 */
