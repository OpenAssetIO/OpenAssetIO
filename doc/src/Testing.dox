/**
 * @page testing Testing Your Implementation
 *
 * @section testing_manager_plugins Testing Manager Plugins
 *
 * The API distribution includes a test harness that can be used to test
 * the implementation of any given @ref ManagerPlugin. It is a
 * <a href="https://docs.python.org/3/library/unittest.html" target="_blank"><tt>unittest</tt></a>
 * based framework that can be used stand-alone via the command line,
 * or extended with additional test suites for extra coverage.
 *
 * The harness acts as an OpenAssetIO @ref host. Two things are needed
 * to test any given codebase:
 *
 * - A @ref openassetio.pluginSystem.ManagerPlugin "ManagerPlugin"
 *   implementation for the manager to be tested.
 * - A Python 'fixtures' file that provides valid inputs, and expected
 *   outputs for that manager.
 *
 * @subsection testing_manager_plugins_fixtures The Fixtures File
 *
 * OpenAssetIO only defines a set of methods that a @ref host can use
 * to communicate with a @ref manager. It does not dictate the specifics
 * of what constitutes valid inputs, or output from any given manager.
 * This is specific to its data model and implementation.
 *
 * Consequently the test harness needs to be supplied with valid
 * values to pass to methods such as
 * @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.isEntityReference
 * "isEntityReference", and the expected values from methods such as
 * @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.identifier
 * "identifier"
 *
 * The file should set a top level variable called `fixtures`, holding
 * a dict structured as-per the `fixtures` parameter documented
 * @ref openassetio.test.manager.harness.executeSuite "here". For
 * example:
 *
 * @code{.py}
 *
 * identifier = <your plugin identifier>
 *
 * fixtures = {
 *     "identifier": identifier,
 *     "Test_identifier": {
 *         "test_matches_fixture": {
 *             "identifier": identifier
 *         }
 *     },
 *     "Test_displayName": { ... },
 *     ...
 * }
 * @endcode
 *
 * @note A comprehensive example fixtures file is provided as part of
 * the Sample Asset Manager included in the distribution (see
 * `fixtures.py`)
 *
 * @subsection testing_manager_plugins_cli Using the Command Line
 *
 * The simplest way to test a @ref ManagerPlugin is via the command
 * line:
 *
 * @code{.sh}
 * python -m openassetio.test.manager -f <path to fixtures file>
 * @endcode
 *
 * If desired, additional arguments can be passed to the `unittest`
 * framework as if the module was being used directly. The following,
 * for example, enables verbose mode:
 *
 * @code{.sh}
 * python -m openassetio.test.manager -f <path to fixtures file> -v
 * @endcode
 *
 * The CLI will run the standard @ref openassetio.test.manager.apiComplianceSuite
 * "API compliance suite". This checks that the plugin's implementation
 * returns the expected types and handles invalid input appropriately.
 *
 * @subsection testing_manager_plugins_api Scripting The Test Harness
 *
 * To run additional test suites, to validate manager-specific business
 * logic, the CLI entry point can be trivially recreated in python by
 * calling the harness API directly:
 *
 * @code{.py}
 * from openassetio.test.manager import harness, apiComplianceSuite
 * import custom_suite
 *
 * # Load the fixtures file
 * fixtures = harness.fixturesFromPyFile(path_to_fixtures_file)
 *
 * # Run the standard suite
 * harness.executeSuite(apiComplianceSuite, fixtures)
 *
 * # Run a custom suite. This could load fixtures from an alternate
 * #Â file, or generated by other means if desired.
 * harness.executeSuite(custom_suite, fixtures)
 * @endcode
 *
 * @note The @ref openassetio.test.manager.apiComplianceSuite
 * "API compliance suite" may serve as a useful reference when authoring
 * custom test suites.
 *
 * @see @ref openassetio.test.manager.harness "harness"
 * @see @ref openassetio.test.manager.apiComplianceSuite
 * "apiComplianceSuite"
 */
