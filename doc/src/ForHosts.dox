/*!
 * @page notes_for_hosts Notes for API Host Developers
 *
 * @section host_architecture Architecture Summary
 *
 * - In OpenAssetIO, a '@ref host' is an application, tool or script
 *   that makes use of the API to interact with an @ref asset_management_system.
 *   This could be a anything from a simple pipeline script to a
 *   full-blown Digital Content Creation application. We use this term
 *   as the host is the thing responsible for 'hosting' the API, and
 *   instantiating one or more instances of the API classes that
 *   represent an asset management system.
 *
 * - Hosts interact with an @ref asset_management_system through an
 *   instance of the @ref openassetio.hostAPI.Manager "Manager" class.
 *   The @ref openassetio.hostAPI.Session "Session" class is used to
 *   instantiate and access this instance for any given manager. The
 *   Manager class wraps the implementation of the API by a specific
 *   asset manager to help with state management.
 *
 * - In order to use the API, every host must provide an
 *   implementation of the @ref HostInterface class. This represents the
 *   application or tool in a generic fashion <i>to</i> the asset
 *   management system. This allows the manager to adapt its behavior
 *   if necessary.
 *
 * - The specific implementation of the @ref HostInterface class
 *   provided by a host when starting a @ref session is wrapped in the
 *   @ref openassetio.managerAPI.Host.Host "Host" class before being
 *   exposed to the manager. This is to allow for assorted middleware
 *   auditing/logging functionality, and provide a degree of isolation
 *   against future API changes.
 *
 * - The main currency in the interactions with a @ref manager is the
 *   @ref entity_reference. These are URIs that uniquely identify an
 *   @ref entity within the management system. The form of an entity
 *   reference is entirely determined by the manager. They are
 *   considered to be opaque to the host.
 *
 * - Nearly all interactions with a @ref openassetio.hostAPI.Manager
 *   "Manager" require an appropriately configured @ref Context. This
 *   tells the @ref asset_management_system about the intended actions
 *   of the host. For example, whether an @ref entity_reference is being
 *   @ref resolve "resolved" for read or for write.
 *
 * - The lifetime of the Context can be carefully managed by the host
 *   to allow the manager to correlate and time-lock disparate API calls.
 *
 * - It's in the host's interest to provide as much information in the
 *   @ref Context and any @ref entity or @ref locale @ref Specification
 *   "Specifications" supplied to API calls as possible. For example,
 *   it is strongly advised to use or derive from standard @ref locale
 *   "locales" depending on which part of a host is making API calls.
 *   This allows the manager to correctly filter assets or adapt its
 *   behavior as required.
 *
 * - You should query an entity's @ref attributes wherever possible,
 *   and use them as the authoritative source of information about an
 *   asset. For example, to determine the colorspace of an image.
 *
 * @section host_reading Recommended Reading
 *
 * @see @ref entities_specifications_and_attributes
 * @see @ref transactions
 * @see @ref openassetio.hostAPI.Session.Session "Session"
 * @see @ref openassetio.hostAPI.Manager.Manager "Manager"
 * @see @ref openassetio.Context.Context "Context"
 *
 * @section host_todo Implementation Check List
 *
 * @subsection host_todo_required_resolution Required for Simple Resolution
 *
 * - Implement the @ref openassetio.hostAPI.HostInterface class
 *   methods:
 *   @ref openassetio.hostAPI.HostInterface.HostInterface.identifier
 *   "identifier" and @ref
 *   openassetio.hostAPI.HostInterface.HostInterface.displayName
 *   "displayName".
 *
 * - Create a @ref openassetio.hostAPI.Session to bootstrap the API,
 *   provide the following objects:
 *    - An instance of the custom class derived from
 *      @ref openassetio.hostAPI.HostInterface "HostInterface".
 *    - A `logger` (derived from
 *      @ref openassetio.log.LoggerInterface "LoggerInterface"), for
 *      simple console logging you can use a
 *      @ref openassetio.log.ConsoleLogger "ConsoleLogger" wrapped
 *      in a @ref openassetio.log.SeverityFilter "SeverityFilter".
 *    - A `managerFactory` capable of instantiating managers,
 *      in the majority of cases a default-configured @ref
 *      openassetio.pluginSystem.PluginSystemManagerFactory
 *      "PluginSystemManagerFactory" will be sufficient.
 *
 * - Create, persist and configure a @ref Context as appropriate for
 *   all calls to the API.
 *
 * - Ask the @ref manager if they manage relevant data via
 *   @ref openassetio.hostAPI.Manager.Manager.managementPolicy
 *   "Manager.managementPolicy" using a suitably configured @ref
 *   Specification and a @ref Context with `kRead` access, and
 *   respect the returned flags.
 *
 * - Always check any suspected entity references with @ref
 *   openassetio.hostAPI.Manager.Manager.isEntityReference
 *   "Manager.isEntityReference" before passing to any other API calls.
 *
 * @see @ref examples_api_initialization
 * @see @ref examples_picking_a_manager
 * @see @ref examples_resolving_a_reference
 *
 * @subsection host_todo_required_publishing Required for Publishing
 *
 * - Ask the @ref manager if they support publishing relevant data via
 *   @ref openassetio.hostAPI.Manager.Manager.managementPolicy
 *   "Manager.managementPolicy" using a suitable configured @ref
 *   Specification and a @ref Context with `kWrite` access, and
 *   respect the returned flags.
 *
 * - Follow the @ref openassetio.hostAPI.Manager.Manager.managementPolicy
 *   "policy", @ref preflight, resolve, write, @ref register process
 *   illustrated @ref example_publishing_a_file "here" whenever
 *   generating new data.
 *
 * - Include in your documentation, any scenarios in which entities are
 *   registered to references known to be of a different @ref Specification.
 *   For example, an editorial application registering an
 *   ImageSpecification to a ShotSpecification reference to indicate
 *   that the images should be published "under" that shot.
 *
 * @see @ref example_publishing_a_file
 *
 * @subsection host_todo_recommended Recommended
 *
 * - Present users with the ability to enable and select a @ref
 *   manager to use to interact with an @ref asset_management_system,
 *   storing applicable options, etc...
 *
 * - @ref openassetio.hostAPI.Manager.Manager.isEntityReference "Test"
 *   and resolve any strings that may represent file system locations
 *   (@ref openassetio.hostAPI.Manager.Manager.resolveEntityReference
 *   "Manager.resolveEntityReference")
 *
 * - Ensure the use of a correctly configured @ref Context for all
 *   calls to the API.
 *
 * - If a manager's @ref openassetio.hostAPI.Manager.Manager.managementPolicy
 *   "managementPolicy" sets @ref openassetio.constants.kWantsThumbnail
 *   "kWantsThumbnail", where possible, generate thumbnails as requested
 *   during publishing.
 *
 * - Allow the @needsref ManagerUIDelegate to participate in browsing/etc...
 *   for any data types they have expressed an interest in managing via
 *   @ref openassetio.hostAPI.Manager.Manager.managementPolicy
 *   "Manager.managementPolicy".
 *
 * - Make the drawing of any parameters that may hold an @ref
 *   entity_reference delegatable to the @needsref ManagerUIDeleagate.
 *
 * - Derive @ref openassetio.specifications "Specifications" for any
 *   custom 'asset types' you may deal with.
 *
 * - You should map any widgets returned by @needsref ManagerUIDelegate.widgets
 *   with the @needsref ui.widgets.attributes.kCreateApplicationPanel flag set to
 *   some native panel type, if you have one.
 *
 * @see @ref example_generating_a_thumbnail
 *
 * @note The UI classes have not yet been migrated from the
 * `FnAssetAPI` code base.
 */
