/*!
 * @page entities_specifications_and_attributes Entities, Specifications and Attributes
 *
 * The concepts discussed on this page are key to understanding how
 * OpenAssetIO extends beyond the simple resolution of an @ref entity_reference
 * into a file path into first-class asset centric workflows.
 *
 * @section Entities
 *
 * To recap, within OpenAssetIO, a @ref host communicates with an
 * @ref asset_management_system to query and manage the existence of
 * @ref entity "entities". An entity is a logical thing managed within
 * a pipeline or workflow by the asset manager. Within the Media and
 * Entertainment sector, this could be a shot, an image sequence, a 3D
 * model or a script.
 *
 * At its core OpenAssetIO has no detailed understanding of the
 * specifics of any given entity, only that conceptually they may or may
 * not exist, and may or may not have multiple versions or relationships
 * to other entities.
 *
 * @section Specifications
 *
 * When a host interacts with an asset management system, the
 * @ref entity_reference is used to identify a specific @ref entity
 * within the system. These references are (generally) in the form of a
 * <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">URI</a>.
 * The format of the reference itself is owned by the @ref manager and
 * is conceptually opaque to the host. Because of this (and the fact
 * that it is specifically only an identifier), no concrete information
 * about an entity can be determined from its reference alone.
 *
 * If a host needs to be able to load data addressed via an entity
 * reference, it may need to know what kind of entity it is. When
 * publishing data to an asset management system, it needs to be able to
 * inform the manager what kind of data is being registered.
 *
 * Within OpenAssetIO, type identification is accomplished by the
 * @ref openassetio.Specification.Specification "Specification"
 * mechanism. Specifications are a hierarchical type system that can
 * carry arbitrary additional data to refine its description. An example
 * of this being an ImageSequenceSpecification, that additionally
 * describes a colorspace or frame range.
 *
 * Specifications are used within OpenAssetIO in several ways:
 *
 * - To define the type of an entity:
 *   - When a host needs correctly loaded referenced data.
 *   - When new data is registered with a manager.
 *   - To filter browsers and other UI delegated to a manager.
 * - To define the nature of a relationship when working with related
 *   entities.
 *
 * A Specification consists of a schema identifier string along with an
 * optional set of key/value pairs. The schema identifier determines the
 * absolute type of an entity, and what keys may be used for additional
 * description.
 *
 * @warning The specification only serves as a type *identifier* and is
 * mapped to a manager's internal classification mechanisms. Additional
 * data from the specification's key/value pairs is not persisted beyond
 * the lifetime of the related API calls in any literal form. If a host
 * wishes to persist any other information about an entity, use the @ref
 * attributes mechanism instead.
 *
 * @see @ref openassetio.Specification.Specification "Specification"
 *
 * @subsection specification_hierarchy The Specification Hierarchy
 *
 * The specification's schema identifier uses a prefix + type pair, for
 * example `entity:file.image`.
 *
 * - The **prefix** defines its broad categorization into one of several
 *   discrete classifications. eg: `entity`, `relationship`,
 *   etc.
 * - The **type** is a simple dot-delimited hierarchy of types within the
 *   specification's classification. eg: `file.image`.
 *
 * The hierarchical nature of the specification type system allows for a
 * host or manager's behavior to be determined at a base level, and
 * applied to any derived specification schemas automatically.
 *
 * For example, a manager may customize the publishing of all
 * `entity:file.document` specifications to store them in a
 * different location and adjust the versioning strategy. A new host may
 * choose to represent its documents via a
 * `entity:file.document.nodegraph.someapp` schema identifier.
 * The manager handling publishing can temporarily upcast to the
 * document base to determine its behavior, treating it similarly to
 * other documents, or choose to add specific functionality if desired.
 *
 * Regardless of whether a manager customizes its internal behavior for
 * any given specification (beyond the baseline required by the API),
 * the preservation of an entity's full schema identifier is essential.
 * A manager is required to always consider the full string when
 * implementing @ref openassetio.managerAPI.ManagerInterface
 * "ManagerInterface" methods that use a Specification as part of their
 * parameters.
 *
 * To continue the example above, a browser requested for the
 * `entity:file.document.nodegraph.someapp` specification, should
 * not list any other entities derived from `entity:file.document`.
 * The same would be true for a query for related references using the
 * application specific specification - even if some aspect of the
 * manager's internal behavior switches on `entity:file.document`,
 * only references for the node graphs produced by someapp should be
 * returned.
 *
 * Conversely, when querying a base type, all derived entities should be
 * returned.
 *
 * @subsection specification_mapping Mapping to Native Types
 *
 * Where possible, both hosts and managers should attempt to map
 * well-known specifications to their native types. A manager with no UI
 * of its own may not need to, but in most situations, a consistent
 * mapping of specifications to first-class concepts is essential for a
 * well-formed user experience.
 *
 * For example, a compositor may map an ImageSequenceSpecification to
 * its native image read and write nodes, and a manager map the same to
 * its own supported clip format so transcodes are generated and
 * displayed in its browser.
 *
 * @subsection specification_selection Picking a Specification to Use
 *
 * As a @ref host, it is important to use the correct specification when
 * making calls to a @ref manager. This ensures the expected type of
 * entity is returned or registered. A manager must also accurately
 * describe any entities when requested. In order to facilitate a common
 * dialog between OpenAssetIO compatible systems, the project provides a
 * set of well-known specifications. Always use one of these where
 * possible as they are, by definition, also known to other tools in the
 * OpenAssetIO ecosystem.
 *
 * Hosts and managers are also free to make their own specifications for
 * native types. For example, deriving from the DocumentSpecification to
 * represent a DCC tool's native file format. They should however,
 * always use the most specific well-known specification as a base. This
 * ensures maximum compatibility with other tools. Any new tool,
 * manager or vendor specific schemas should be listed in the
 * appropriate technical documentation supplied with the software.
 *
 * @warning The library of well-known OpenAssetIO base schemas is yet to
 * be ported from `FnAssetAPI`, and will be available soon.
 *
 * @section Attributes
 *
 * Entities are generally more than just a file on disk, they have
 * additional data that defines their properties or interpretation.
 *
 * In its simplest form, OpenAssetIO's @ref attributes system can be used
 * by a @ref host to store and retrieve additional data about an entity
 * from an @ref asset_management_system without the need for side-car
 * files.
 *
 * An example of this is within a tool that displays image sequences.
 * The @ref primary_string is resolved to provide the path to the images
 * on disk, and the attributes provided by the manager used to control
 * the colorspace and frame range used for playback. This can avoid
 * fragile mechanisms such as extension-based mappings and directory
 * searches.
 *
 * Extending this further, an entity's primary string does not have to
 * be a file path, or even a URL.
 *
 * If it's possible to break down the description of an entity into a
 * string, and/or set of named values, OpenAssetIO can be used directly
 * to publish or query entities of this type.
 *
 * A common application of this is its use in a timeline based
 * application to query and publish shot timing information directly to
 * a production tracking system.
 *
 * The API contract states that a @ref manager **must** guarantee to
 * store and recall any value registered by this mechanism for supported
 * specifications. This allows a host to manage arbitrary data through
 * the asset management system without any special handling by the
 * manager itself.
 *
 * If a Manager holds entities created by means other than OpenAssetIO
 * (its own interface, other APIs, etc...) then it is important that it
 * 'bridges' any attributes from the well-known OpenAssetIO names to its
 * corresponding internal name, for both set and get.
 *
 * @warning In OpenAssetIO, attributes are limited to simple constants
 * using basic types such as string, float, int and bool. Time-varying
 * data is beyond the scope of this API and should be managed through
 * alternate means such as <a href="http://opentimeline.io" target="_blank">OpenTimelineIO</a>
 * or similar.
 */
