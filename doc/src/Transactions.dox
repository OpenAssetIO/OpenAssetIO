/*!
 * @page transactions Transactions
 *
 * @section transactions_background Background
 *
 * When a host needs to register multiple assets as part of a compound
 * structure or logical group, the @ref ManagerInterface includes
 * methods to bookend a series of API calls as a single transaction.
 *
 * Transactions behave similarly to those in a database, in that any
 * changes made within any given transaction should be considered
 * atomic, and not exposed to the public state until the transaction
 * has been completed. Canceling a transaction mid way should discard
 * the effects of any previous actions it included.
 *
 * @see @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.startTransaction "ManagerInterface.startTransaction"
 * @see @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.finishTransaction "ManagerInterface.finishTransaction"
 * @see @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.cancelTransaction "ManagerInterface.cancelTransaction"
 *
 * For more details on the requirements of the @ref asset_management_system
 * in relation to transaction handling, see the @ref transactions_for_the_manager
 * section below.
 *
 * @section transactions_example Example Host Code
 *
 * Lets take the case of publishing a shot and it's clips from an
 * editorial application. Simplified pseudo-code within a host for the
 * transaction handling may look something like this:
 *
 * @code{.py}
 * def create_shot_with_clips(self, shot, entity_ref, context):
 *    """
 *    Creates a shot, and publishes all its clips under it.
 *    """
 *    manager.startTransaction(context)
 *    try:
 *        # Create the shot first, so we can then publish the clips to it
 *        shot_ref = manager.register([shot.name], [shot.attributes],
 *                                    [shot.spec], [entity_ref], context)[0]
 *        # Register the clips to the shot's entity reference
 *        register_clips(shot.clips, shot_ref, context)
 *    except Exception as e:
 *        manager.cancelTransaction(context)
 *        raise e
 *    manager.finishTransaction(context)
 * @endcode
 *
 * This all seems very straight forward. Until we consider the case of a
 * naive multi-shot export :
 *
 * @code{.py}
 * def create_all_shots_with_clips(sequence, entity_reference, context):
 *    """
 *    Creates all the shots in a sequence, along with their clips.
 *    """
 *    for shot in sequence.shots:
 *      create_shot_with_clips(shot, entity_reference, context)
 * @endcode
 *
 * This would end up creating a new transaction for each individual shot
 * instead of one transaction for the whole sequence. We need a simpler
 * way for hosts to manage transactions in structured code.
 *
 * @section transactions_action_groups Action Groups
 *
 * The @ref openassetio.hostAPI.transactions.TransactionCoordinator
 * "TransactionCoordinator" simplifies the process of managing
 * transactions within a host's code base. It introduces the concept of
 * an Action Group. These groups are pushed onto a stack. The
 * coordinator takes care of starting, finishing or cancelling a
 * transaction with the manager whenever there is more than one action
 * on the stack.
 *
 * The contrived sequence publishing example code has been updated below
 * to use this mechanism, with the result that only a single transaction
 * would be create for both the singular and sequence use cases.
 *
 * @code{.py}
 * def create_shot_with_clips(shot, entityRef, context, coordinator):
 *    """
 *    Creates a shot, and publishes all its clips under it.
 *    """
 *    with coordinator.scopedActionGroup(context):
 *        # Create the shot so we can publish
 *        shot_ref = manager.register([shot.name], [shot.attributes],
 *                                    [shot.spec], [entity_ref], context)[0]
 *        # Register the clips to the shots entity reference
 *        register_clips(shot.clips, shot_ref, context)
 *
 *
 * def create_all_shots(sequence, entity_reference, context, coordinator):
 *    """
 *    Creates all the shots in a sequence, along with their clips.
 *    """
 *    with coordinator.scopedActionGroup(context):
 *        for shot in sequence.shots:
 *            create_shot_with_clips(shot, entity_reference, context, coordinator)
 *
 *
 * coordinator = openassetio.hostAPI.TransactionCoordinator(manager)
 * create_all_shots(sequence, entity_reference, context, coordinator)
 * @endcode
 *
 * The TransactionCoordinator also takes care of (optionally) cancelling a
 * transaction in the case of an exception being raised within
 * the block
 *
 * The result is that well-behaved, transaction aware host API code
 * should be easier to write using the TransactionCoordinator in place
 * of the low-level transaction methods of the Manager.
 *
 * @warning It is critical that a host uses the same context (or a child
 * of it) for any given transaction, as the transaction is anchored to
 * the context, not the API session.
 *
 * From the manager's perspective, it only sees a single set of coalesced
 * calls to either start, finish or cancel as appropriate.
 *
 * @section transactions_for_the_manager Transaction Support in a Manager
 *
 * Due to the additional back-end complexity, transaction support in the
 * implementation of any given @ref asset_management_system is entirely
 * optional. There is no hard requirement to support this API and the
 * default implementation makes it simply a no-op.
 *
 * If a manager natively supports the concept of transactions, mapping
 * them to the OpenAssetIO model can make state management around error cases
 * more straightforward in supporting hosts.
 *
 * The @ref stable_resolution_manager_state mechanism allows between API
 * calls to be correlated. This is used as the basis of the transaction
 * system.
 *
 * Whenever a @ref Context is created, The @ref ManagerInterface class has the
 * opportunity to insert a persistent state object. This object is persisted
 * for as long as the context is kept alive.
 *
 * The first time a host calls @ref openassetio.hostAPI.transactions.TransactionCoordinator.pushActionGroup()
 * "pushActionGroup" then the TransactionCoordinator will start a new
 * transaction via @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.startTransaction
 * "startTransaction".  This call is passed the state token from the
 * host's Context, this can be used as an anchor for the transaction as
 * subsequent API calls made as part of that transaction will have the
 * same state token in their context.
 *
 * The host is then free to push/pop groups as it wishes. Once the last
 * open group has been popped, the TransactionCoordinator will call @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.finishTransaction
 * "finishTransaction".
 *
 * Should an fatal error arise in the host, then it will call
 * openassetio.transactions.TransactionCoordinator.cancelActions with the Context,
 * which in turn, will call @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.cancelTransaction
 * "cancelTransaction" to instruct the manager to attempt to
 * undo/rollback any changes made during the transaction.
 *
 * @subsection transactions_for_the_manager_registration Registration
 *
 * In our shot creation example above, it can be noted that the
 * registration of the shot, must be completed before its clips can be
 * registered. This is because clip registration needs the shot's
 * @ref entity_reference to register to.
 *
 * @warning Consequently, calls to @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.preflight
 * "preflight" or @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.register "register"
 * performed as part of a transaction must produce valid references that
 * can be used within the same transaction for subsequent registrations.
 * Any registered @ref attributes must also be queryable.
 */
