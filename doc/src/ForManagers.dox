/*!
 * @page notes_for_managers Notes for Asset System Integrators
 *
 * @section manager_architecture_summary Architecture Summary
 *
 * - In OpenAssetIO, a @ref manager is some centralized system that serves
 *   as a source of truth regarding the status and/or location of digital
 *   media and other organizational aspects of a project. The goal of the
 *   API is to allow these systems to be more easily integrated, and
 *   critically, more comprehensively involved in the lifetime of content
 *   as it moves between various tools and applications.
 *
 * - The implementation of any given manager may consist of
 *   several discrete services, but within any OpenAssetIO session, it is
 *   represented though a singular @ref ManagerPlugin.
 *
 * - The API is initialized and managed by a @ref host. The host may
 *   create one or more sessions. Each session allows the host to
 *   communicate with a single manager instance.
 *
 * - All interaction between the @ref host and a @ref manager occurs
 *   through the manager's implementation of the @ref ManagerInterface.
 *   This is a publicly stateless interface, where all associated
 *   information about the session, and caller are provided to each method
 *   by the API middleware.
 *
 * - A manager's implementation of the @ref ManagerInterface supplied
 *   through its @ref ManagerPlugin is wrapped in the @ref
 *   openassetio.hostAPI.Manager.Manager "Manager" class before being made
 *   available to the @ref host. This is to allow for host session state
 *   management and other auditing/logging functionality. It also
 *   provides a degree of isolation against future API changes.
 *
 * - The @ref ManagerInterface is designed to be stateless. The
 *   response to any method should only depend on the underlying asset
 *   data and any other objects passed into each call. The same logical
 *   operation may be spread out over time and space. It is critical that
 *   any particular implementation does not rely on local in-memory state.
 *
 * - The main currency in the interaction with a host is the @ref
 *   entity_reference. These are URIs that uniquely identify an @ref
 *   entity within the management system. The form of an entity reference
 *   is entirely determined by the manager. They are considered to be
 *   opaque by the host.
 *
 * - The manager is expected to store and recall the
 *   @ref primary_string and @ref attributes
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.register
 *   "registered" to any given @ref entity_reference,
 *   grouped by its @ref Specification "specification", and return these
 *   values from the relevant query methods when supplied the
 *   reference returned from the registration.
 *
 * - A @ref host may query other well-known or host-specific @ref attributes
 *   to provide additional customization of behavior or the handling of
 *   data referenced by an @ref entity_reference. For example,
 *   determining the correct frame range and colorspace of an image
 *   sequence.
 *
 * - The @ref Context supplied to a method can be used to understand
 *   the intentions of the caller, as well as to determine which part of
 *   an application is involved in the call, for example, which image read
 *   node in a compositor is resolving a reference.
 *
 * - Many API calls are passed a @ref Specification. They form a
 *   strong hierarchical type mechanism. It is not expected for a manager
 *   to persist any data contained within a specification - but they must
 *   be respected as a filter predicate for browsing/query operations, and
 *   as a type specifier for creation operations. See @ref entities_specifications_and_attributes
 *   for more details on this mechanism.
 *
 * - The @ref ManagerInterface implementation will be passed a
 *   @ref openassetio.managerAPI.HostSession "HostSession" to the
 *   majority of API calls. This should be used for *all* logging, and
 *   any generic host queries via the supplied
 *   @ref openassetio.managerAPI.Host "Host" object. Managers may wish
 *   to use details of the @ref host obtained from this object to adapt
 *   their behavior if desired.
 *
 * - If a manager wants to support some kind of temporally stable
 *   resolution of @ref meta_version "Meta-versions" or similar, implement
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.createState
 *   "createState", and return some token that can be used as an anchor. A
 *   new token will be requested each time a @ref Context is made, and
 *   will then be available via
 *   @ref openassetio.Context.Context.managerInterfaceState
 *   "Context.managerInterfaceState" in any call that receives a context.
 *   Hosts will take care of managing the lifetime of any given Context in
 *   terms that are meaningful for the user. Eg. the state token will be
 *   shared across distributed multi-host renders.
 *
 * - A manager can provide additional UI elements that interact
 *   with the host, by returning them from @needsref ManagerUIDelegate.getWidgets.
 *   The host will create suitable panels, etc. for them, based on the
 *   flags set in @needsref BaseWidget.getAttributes.
 *
 * @note The UI classes have not yet been migrated from the
 * `FnAssetAPI` code base.
 *
 * @section manager_todo Implementation Check List
 *
 * @subsection manager_todo_basic_resolution Required for Resolution Only
 *
 * - Implement the @ref openassetio.managerAPI.ManagerInterface
 *   "ManagerInterface" class methods
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.identifier
 *   "identifier" an
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.displayName
 *   "displayName".
 *
 * - Implement @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.managementPolicy
 *   "managementPolicy" to control which Host-side data types you wish to be
 *   involved in managing. Return `kIgnored` for any queries with
 *   a context with `kWrite` access (this disables publishing).
 *
 * - Implement the methods grouped under the "Entity Reference Inspection"
 *   and "Entity Reference Resolution" sections of the
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface
 *   "ManagerInterface", along with
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.entityName
 *   "entityName" and
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.entityDisplayName
 *   "entityDisplayName" to support lookup of assets.
 *
 * - Implement a @ref ManagerPlugin and install this on
 *   @ref plugin_path_var.
 *
 * @subsection manager_todo_attributes Required for Extended Functionality
 *
 *  Some hosts may make use of an entity's attributes to provide
 *  extended functionality. Such as automating the settings of read
 *  nodes or improving handling of the asset's data.
 *
 * - Implement
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.getEntityAttributes
 *   "getEntityAttributes" to bridge any internal asset data to the
 *   well-known @ref attributes if possible.
 *
 * @subsection manager_todo_publishing Required for Publishing
 *
 * - Update the implementation of
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.managementPolicy
 *   "managementPolicy" to return a suitable mask for contexts with a
 *   `kWrite` access.
 *
 * - Implement the methods grouped under the "Publishing" section, and
 *   the remaining methods in the "Entity Information" section of
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface
 *   "ManagerInterface", to support the registration of new assets.
 *
 * - Map supported OpenAssetIO specifications to internal asset types
 *   where possible.
 *
 * - Persist the exact OpenAssetIO specific specification schema
 *   identifier supplied to @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.register
 *   "register". This allows new asset types to be registered and
 *   filtered, even if they don't have a unique type within a managers
 *   implementation - see @ref specification_hierarchy.
 *
 * - Persist the @ref primary_string supplied to @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.register
 *   "register". It should be considered opaque, unless the
 *   @ref Specification is understood. In all other cases it should be
 *   returned verbatim by @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.resolveEntityReference
 *   "resolveEntityReference" when passed the reference returned from
 *   the registration (conditional on any subsequent registrations to
 *   the reference and the policy regarding entity versioning).
 *
 * @note An example of a situation where the manager is allowed to mutate the
 * @ref primary_string is for all specifications derived from
 * FileSpecification. In this case, the primary string is known to be a
 * URL so may be rewritten at will providing it still points to
 * synonymous data. This allows data to be relocated after it has been
 * registered as appropriate.
 *
 * - In a similar way to @ref primary_string "primary strings", the @ref
 *   attributes set for the entity via @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.setEntityAttributes
 *   "setEntityAttributes" should be stored. This can be freely remapped
 *   to internal fields, but should always be returned via the same
 *   name used when set. The data should be persisted verbatim unless the
 *   specification is understood.
 *
 * - Bridge any internal asset data to the well-known @ref attributes
 *   wherever possible. This will be used by the host as a preferential
 *   source of truth. For example, for the colorspace or frame range of
 *   an image sequence.
 *
 * @subsection manager_todo_related_entities Supporting Relationships
 *
 * Relationship support is not a pre-requisite, but allows for advanced
 * functionality in many hosts.
 *
 * Relationships aren't required for publishing itself, as the parent
 * for an new entity is always inferred from the entity addressed by the
 * reference used in the @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.preflight
 * "preflight" or @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.register
 * "register" call.
 *
 * For example, publishing an ImageSpecification to the entity reference
 * for a shot means that the image should be published under that shot
 * as the manager sees fit.
 *
 * This may sound counterintuitive, but the references used for
 * publishing will generally originate either from the user, or the
 * manager itself - in response to browsing for a writable target entity
 * for the appropriate specification. Consequently, they should be
 * conceptually valid for the operation.
 *
 * Hosts will include in their documentation notes on specific
 * scenarios in which they register entities with one specification to
 * references known to be of another, such as the editorial example
 * above.
 *
 * This approach is critical to ensure that OpenAssetIO has no inherent
 * concept of any specific entity hierarchy, which ensures it never
 * places any constraints on the implementation of any given asset
 * management system.
 *
 * There are however times when a host will explicitly add a
 * relationship to an entity. Generally speaking, this is when an
 * existing entity is known to be relevant to a newly created
 * one. For example, if an image has been rendered from an assetized
 * script. The host may call @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.setRelatedReferences
 * "setRelatedReferences", to add the script's reference to the newly
 * registered image, using the SourceDocumentRelationship specification.
 *
 * In order to support entity relationships:
 *
 * - Implement
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.getRelatedReferences
 *   "getRelatedReferences" to return any appropriate @ref entity_reference
 *   "entity references" for the supplied @ref Specification. Hosts may
 *   use these relationships to simplify common pipeline integration
 *   tasks. For example, loading multiple AOVs for a render, or
 *   determining data dependencies when transferring assets.
 *
 * - If appropriate, implement
 *   @ref openassetio.managerAPI.ManagerInterface.ManagerInterface.setRelatedReferences
 *   "setRelatedReferences" to update any internal relationships that
 *   may be affected by the registered change.
 *
 * @note It is currently in flux as to whether relationship sets should
 * be a hard requirement of the API, or considered hints as set by the
 * host. There is even question as to the validity of the API allowing
 * sets at all, please contribute to the discussion here if you have any
 * opinion on the matter: https://github.com/TheFoundryVisionmongers/OpenAssetIO/discussions/18
 *
 * @subsection manager_todo_ui Embedding Custom UI Within the Host
 *
 * @note The UI layer of OpenAssetIO is yet to be ported to this code base,
 * this documentation section is currently in-progress.
 *
 * - Filter any browsers based on the supplied @ref Specification.
 *
 * @section manager_reading Recommended Reading
 *
 * @see @ref entities_specifications_and_attributes
 * @see @ref transactions
 * @see @ref openassetio.managerAPI.ManagerInterface "ManagerInterface"
 * @see @ref openassetio.pluginSystem.ManagerPlugin "ManagerPlugin"
 * @see @ref openassetio.Context "Context"
 * @see @ref openassetio.specifications "specifications"
 * @see @ref openassetio.managerAPI.Host "Host"
 * @see @needsref ManagerUIDelegate
 * @see @needsref ui.widgets
 */
